media = mean(df[[coluna]], na.rm=T)
desvpad = sd(df[[coluna]], na.rm=T)
if (nrow(df) > 3 & nrow(df) < 5000){
p_valor = shapiro.test(df[[coluna]])$p.value %>% retorne_p() %>% retorne_p_ajust()
subtitulo = paste(p_valor, '(Shapiro-wilk)')
} else {
p_valor = ks.test(df[[coluna]], "pnorm", mean=media, sd=desvpad)$p.value %>% retorne_p() %>% retorne_p_ajust()
subtitulo = paste(p_valor, '(Kolmogorov-Smirnov)')
}
lista_cor0 = c('tomato','#40BCD8','#fdf0d5','#fefee3','#bee9e8','#f6aa1c','grey75') # COR DA BARRA
lista_cor1 = c('red','black','black','black','black','black','black') # COR DA BARRA
lista_cor2 = c('red','blue','#c1121f','#d68c45','#1b4965','#941b0c','grey45') # COR DA LINHA
ggplot(df, aes(x=!!sym(coluna)))+
geom_histogram(aes(y=..density..), bins=qtd_bins,
fill = alpha(lista_cor0[cor_esc], 0.7),
colour = lista_cor1[cor_esc]) +
geom_density(lwd = 1.2, linetype = 2, colour = lista_cor2[cor_esc]) +
geom_function(fun= dnorm, args=list(mean=media,sd=desvpad), col='black', lwd=1, lty=4) +
labs(x=NULL, y='Probability Density', subtitle = subtitulo)
}
# Teste
teste_normalidade(df, 'var_num')
source("~/Codigos úteis/R program/funs.R", echo=TRUE)
install.packages("hrbrthemes")
# Tamanho da amostra
tamanho_amostra = 500
n = tamanho_amostra / 2
# Criando uma coluna de desfecho (não/sim)
desfecho = c(rep("não", n), rep("sim", n))
# Filtros para separar os grupos
filtro_nao = desfecho == "não"
filtro_sim = desfecho == "sim"
# Criando um DataFrame vazio com a coluna 'desfecho'
df = data.frame(desfecho = desfecho)
# Desfecho numerico
df$var_num = NA
df$var_num[filtro_nao] = round(rnorm(n, mean = 45, sd = 30))
df$var_num[filtro_sim] = round(rnorm(n, mean = 60, sd = 30))
df$tratamentos[filtro_nao] = sample(c('A','B','C'), size = n, replace = TRUE, prob = c(0.7, 0.2, 0.1))
df$tratamentos[filtro_sim] = sample(c('A','B','C'), size = n, replace = TRUE, prob = c(0.1, 0.2, 0.7))
df$tratamentos = df$tratamentos %>% as.factor()
df$desfecho = df$desfecho %>% as.factor()
df
#source("~/Codigos úteis/R program/funs.R", echo=TRUE)
if(!require(ggplot2)) install.packages("ggplot2")
library(ggplot2)
# https://ggplot2-book.org/themes
tema = theme_classic(base_family = "Times New Roman") # https://ggplot2-book.org/themes#sec-themes
elementos_tema = theme_update( #theme(
# Titulo
plot.title = element_text(face = "bold", colour = "black"),
# Painel -> https://ggplot2-book.org/themes#panel-elements
panel.background = element_rect(fill = "white", color = NA), # Background - Plano de Fundo
panel.grid.major = element_line(color = "grey80", linewidth = 2, linetype = "dotted"), # Grade
panel.grid.minor = element_line(color = "grey90"),
# Eixos -> https://ggplot2-book.org/themes#sec-theme-axis
axis.title.x = element_text(size = 12, face = "bold"), # Titulo
axis.title.y = element_text(size = 12, face = "bold", angle = -30),
axis.text.x = element_text(size = 10), # Labels
axis.text.y = element_text(size = 10),
axis.line = element_line(color = "black"),
# Legenda -> https://ggplot2-book.org/themes#legend-elements
#legend.position = "bottom",
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10),
plot.margin = margin(10, 10, 10, 10) # Margem
)
theme_set(tema)
# element_blank() #Nada
# facet_wrap() facet_grid() -> https://ggplot2-book.org/themes#faceting-elements
# font face -> https://ggplot2.tidyverse.org/articles/ggplot2-specs.html#font-face
# themes -> https://ggplot2.tidyverse.org/reference/ggtheme.html
teste_normalidade = function(df, coluna, qtd_bins=20, cor_esc=1){
media = mean(df[[coluna]], na.rm=T)
desvpad = sd(df[[coluna]], na.rm=T)
if (nrow(df) > 3 & nrow(df) < 5000){
p_valor = shapiro.test(df[[coluna]])$p.value %>% retorne_p() %>% retorne_p_ajust()
subtitulo = paste(p_valor, '(Shapiro-wilk)')
} else {
p_valor = ks.test(df[[coluna]], "pnorm", mean=media, sd=desvpad)$p.value %>% retorne_p() %>% retorne_p_ajust()
subtitulo = paste(p_valor, '(Kolmogorov-Smirnov)')
}
lista_cor0 = c('tomato','#40BCD8','#fdf0d5','#fefee3','#bee9e8','#f6aa1c','grey75') # COR DA BARRA
lista_cor1 = c('red','black','black','black','black','black','black') # COR DA BARRA
lista_cor2 = c('red','blue','#c1121f','#d68c45','#1b4965','#941b0c','grey45') # COR DA LINHA
ggplot(df, aes(x=!!sym(coluna)))+
geom_histogram(aes(y=..density..), bins=qtd_bins,
fill = alpha(lista_cor0[cor_esc], 0.7),
colour = lista_cor1[cor_esc]) +
geom_density(lwd = 1.2, linetype = 2, colour = lista_cor2[cor_esc]) +
geom_function(fun= dnorm, args=list(mean=media,sd=desvpad), col='black', lwd=1, lty=4) +
labs(x=NULL, y='Probability Density', subtitle = subtitulo)
}
# Teste
teste_normalidade(df, 'var_num')
cont_grafi = function(df, coluna){
# Criando tabela de contagem
tabela = df %>% filter(!is.na(!!sym(coluna))) %>%
group_by(!!sym(coluna)) %>%
summarise(n = n()) %>% mutate(Freq = round(n/sum(n)*100, 2)) %>% ungroup()
ggplot(tabela, aes(x=as.factor(!!sym(coluna)), y=Freq, label=Freq, fill=as.factor(!!sym(coluna)))) +
geom_col(show.legend=FALSE, color="black") +
geom_text(aes(y=Freq, label = sprintf("%0.1f%%", Freq), vjust=-0.2)) +
theme(legend.position = "bottom") +
scale_y_continuous(limits = c(0, 100), breaks=seq(from = 0, to = 100, by = 20)) +
labs(x=NULL, y="Frequency (%)", title =NULL)
}
# Teste
cont_grafi(df, 'desfecho')
cont_grafi(df, 'tratamentos')
#ggsave("nome_grafico.png", height=15, width=20, units="cm", dpi= 600)
#para representar uma tabela de contingencia (categorica vs categorica)
conti_grafi = function(df, coluna_x, coluna_y, sentido_percent='col'){
if (sentido_percent == 'row'){ #algoritmo de troca troca #la_ele #kapa_pride
temp = coluna_x
coluna_x = coluna_y
coluna_y = temp
}
# Criando tabela de contagem
grafi = df %>% filter(!is.na(!!sym(coluna_x)) & !is.na(!!sym(coluna_y))) %>%
group_by(!!sym(coluna_y), !!sym(coluna_x)) %>%
summarise(n = n()) %>% mutate(Freq = round(n/sum(n)*100, 2)) %>% ungroup()
ggplot(grafi, aes(x=as.factor(!!sym(coluna_y)), y=Freq, fill=as.factor(!!sym(coluna_x)))) +
# Grafico
geom_bar(stat="identity", position=position_dodge(preserve = 'single'), color='black') +
# Outros
geom_text(aes(y=Freq, label = sprintf("%0.1f%%", Freq)), position=position_dodge(0.75), vjust=-0.2, hjust=0.5) +
theme(legend.position = "bottom") +
scale_y_continuous(labels = scales::percent) +
scale_y_continuous(limits = c(0, 100), breaks=seq(from=0, to=100, by=10)) +
labs(x=NULL, y='Frequency (%)', title=NULL, fill=NULL)
}
# Teste
conti_grafi(df, 'desfecho', 'tratamentos')
#ggsave("nome_grafico.png", height=15, width=20, units="cm", dpi= 600)
# Graficos (Boxplot, Violino, Jitter) por Grupos -> para representar analise númerica por grupo (variavel: numerica vs categorica)
box_vin_jit = function(df, col_num, col_cat){
ggplot(df, aes(x=as.factor(!!sym(col_cat)), y=!!sym(col_num), fill=as.factor(!!sym(col_cat)))) +
# Graficos
geom_jitter(alpha=0.5, show.legend=F, size=2.5, position=position_jitter(0.25)) +
geom_violin(alpha=0.2, show.legend=F, fill='white') +
geom_boxplot(alpha=0.8, show.legend=F, width=0.5) + #outlier.shape = NA
# Medias extras
geom_errorbar(stat = "summary", fun.data = "mean_se", width= 0.3, color="white") +
geom_point(stat = "summary", fun = "mean", show.legend=F, color="red", size=2) +
# Outros
theme(legend.position = "bottom") +
labs(x=NULL, y=NULL, title=NULL)
}
# Teste
box_vin_jit(df, 'var_num', 'tratamentos')
box_vin_jit(df, 'var_num', 'desfecho')
#ggsave("nome_grafico.png", height=10, width=10.5, units="cm", dpi= 600)
# para representar média e desvio padrão (variavel: numerico (categorica vs categorica) )
dinamite = function(df, col_num, col_cat_y, col_cat_x){
# Tabela com medidas
tabela = df %>% filter(!is.na(!!sym(col_cat_y))) %>%
group_by(!!sym(col_cat_y), !!sym(col_cat_x)) %>%
summarise(
mean = mean(!!sym(col_num), na.rm = TRUE),
sd = sd(!!sym(col_num), na.rm = TRUE)) %>%
mutate(ymin= mean - sd,
ymax= mean + sd)
tabela$ymin = ifelse(tabela$ymin <= 0, 0.01, tabela$ymin)
print(tabela)
ggplot(tabela, aes(x=as.factor(!!sym(col_cat_x)), y=mean, fill=as.factor(!!sym(col_cat_y)))) +
# Grafico
geom_bar(stat="summary", fun="mean", color='black', position=position_dodge(0.75)) +
geom_errorbar(aes(ymin=ymin, ymax=ymax), width=0.3, position=position_dodge(0.75)) +
# Outros
geom_text(aes(label= round(mean,0)), position= position_dodge(0.75), vjust=-0.2, hjust=-0.3) +
theme(legend.position= "bottom") +
labs(x=NULL, y= "Mean", title=NULL) #+ coord_flip()
}
# Teste
dinamite(df, 'var_num', 'desfecho', 'tratamentos')
#Grafico de densidade (variavel: numerica vs categorica)
densidade_grafi = function(df, col_num, col_cat){
niveis = df[[col_cat]] %>% as.factor() %>% levels()
grupo1 = df[[col_num]][df[[col_cat]] == niveis[1]]
grupo2 = df[[col_num]][df[[col_cat]] == niveis[2]]
if (normalidade_por_grupo_criterio(df, col_num, col_cat) == TRUE){
medidas = df %>% group_by(!!sym(col_cat)) %>% summarize(med = mean(!!sym(col_num)))
} else {
medidas = df %>% group_by(!!sym(col_cat)) %>% summarize(med = median(!!sym(col_num)))
}
ggplot(df, aes(x=!!sym(col_num), fill=as.factor(!!sym(col_cat)))) +
geom_density(position='identity', alpha =0.5)+
geom_vline(data = medidas, aes(xintercept = med, color = as.factor(!!sym(col_cat))),
linetype="dashed", size=1, show.legend=F) +
geom_text(data = medidas, aes(x = med, label = round(med, 1), y = 0),
color="black", vjust = -0.5, hjust = 1) +
theme(legend.position = "bottom") +
labs(x=NULL, y=NULL, fill=NULL)
}
# Teste
densidade_grafi(df, 'var_num', 'desfecho')
# (data ou numerica vs categorica)
time_line_grafi = function(df, col_num, col_cat){
tabela = df %>%
group_by(!!sym(col_num), !!sym(col_cat)) %>%
summarise(n = n()) %>% mutate(Freq = round(n/sum(n), 2)) %>% ungroup()
#filter(variavel_categorica == 1) %>% ungroup()
ggplot(tabela, aes(x=!!sym(col_num), n, label=n, y=n)) +
geom_line() + geom_point(size=2) +
geom_text(aes(label = n), nudge_y = 1.5) +
theme_bw()
}
# Teste
# time_line_grafi(de, 'var_num', 'desfecho')
fore_plot = function(tabela, titulo = NULL){
xminimo = min(tabela$`2.5 %`, na.rm = T)
xmaximo = max(tabela$`97.5 %`, na.rm = T)
if ( xmaximo >= 100){
escala = 'log10'
} else{
escala = 'log2'
}
plot1 = ggplot(tabela, aes(y = variavel, x = OR)) +
geom_point(shape = 18, size = 5, color = 'navyblue') +
geom_errorbarh(aes(xmin = `2.5 %`, xmax = `97.5 %`), height = 0.25) +
geom_vline(xintercept = 1, color = "red", linetype = "dashed", cex = 1, alpha = 0.5) +
xlab("Odds Ratio (95% CI)") +
ylab(" ") +
labs(title=titulo) +
theme_bw() +
theme(panel.border = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
axis.text.y = element_text(size = 12, colour = "black"),
axis.text.x.bottom = element_text(size = 12, colour = "black"),
axis.title.x = element_text(size = 12, colour = "black")) +
scale_x_continuous(trans='log10') #+ xlim(c(xminimo-2, xmaximo+2)) #+ geom_text(aes(label = pvalor))
table_base = ggplot(tabela, aes(y=variavel)) +
ylab(NULL) + xlab("  ") +
theme(plot.title = element_text(hjust = 0.5, size=12),
axis.text.x = element_text(color="white", hjust = -3, size = 25), ## This is used to help with alignment
axis.line = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.y = element_blank(),
legend.position = "none",
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_blank())
tab1 = table_base +
geom_text(aes(x = 1, label = pvalor), size = 4) +
ggtitle("P-valor")
tab2 = table_base +
labs(title = "space") +
geom_text(aes(x = 1, label = OR_IC), size = 4) +
ggtitle("OR(IC)")
lay =  matrix(c(1,1,1,1,1,1,1,1,1,1,2,3,3), nrow = 1)
#return(grid.arrange(plot1, tab1, tab2, layout_matrix = lay))
return(plot1)
}
source("~/Codigos úteis/R program/funs.R", echo=TRUE)
install.packages("hrbrthemes")
source("~/Codigos úteis/R program/funs.R", echo=TRUE)
library(hrbrthemes)
remove.packages("hrbrthemes")
source("~/Codigos úteis/R program/funs.R", echo=TRUE)
# Tamanho da amostra
tamanho_amostra = 500
n = tamanho_amostra / 2
# Criando uma coluna de desfecho (não/sim)
desfecho = c(rep("não", n), rep("sim", n))
# Filtros para separar os grupos
filtro_nao = desfecho == "não"
filtro_sim = desfecho == "sim"
# Criando um DataFrame vazio com a coluna 'desfecho'
df = data.frame(desfecho = desfecho)
# Desfecho numerico
df$var_num = NA
df$var_num[filtro_nao] = round(rnorm(n, mean = 45, sd = 30))
df$var_num[filtro_sim] = round(rnorm(n, mean = 60, sd = 30))
df$tratamentos[filtro_nao] = sample(c('A','B','C'), size = n, replace = TRUE, prob = c(0.7, 0.2, 0.1))
df$tratamentos[filtro_sim] = sample(c('A','B','C'), size = n, replace = TRUE, prob = c(0.1, 0.2, 0.7))
df$tratamentos = df$tratamentos %>% as.factor()
df$desfecho = df$desfecho %>% as.factor()
df
#source("~/Codigos úteis/R program/funs.R", echo=TRUE)
if(!require(ggplot2)) install.packages("ggplot2")
library(ggplot2)
# https://ggplot2-book.org/themes
tema = theme_classic(base_family = "Times New Roman") # https://ggplot2-book.org/themes#sec-themes
elementos_tema = theme_update( #theme(
# Titulo
plot.title = element_text(face = "bold", colour = "black"),
# Painel -> https://ggplot2-book.org/themes#panel-elements
panel.background = element_rect(fill = "white", color = NA), # Background - Plano de Fundo
panel.grid.major = element_line(color = "grey80", linewidth = 2, linetype = "dotted"), # Grade
panel.grid.minor = element_line(color = "grey90"),
# Eixos -> https://ggplot2-book.org/themes#sec-theme-axis
axis.title.x = element_text(size = 12, face = "bold"), # Titulo
axis.title.y = element_text(size = 12, face = "bold", angle = -30),
axis.text.x = element_text(size = 10), # Labels
axis.text.y = element_text(size = 10),
axis.line = element_line(color = "black"),
# Legenda -> https://ggplot2-book.org/themes#legend-elements
#legend.position = "bottom",
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10),
plot.margin = margin(10, 10, 10, 10) # Margem
)
theme_set(tema)
# element_blank() #Nada
# facet_wrap() facet_grid() -> https://ggplot2-book.org/themes#faceting-elements
# font face -> https://ggplot2.tidyverse.org/articles/ggplot2-specs.html#font-face
# themes -> https://ggplot2.tidyverse.org/reference/ggtheme.html
teste_normalidade = function(df, coluna, qtd_bins=20, cor_esc=1){
media = mean(df[[coluna]], na.rm=T)
desvpad = sd(df[[coluna]], na.rm=T)
if (nrow(df) > 3 & nrow(df) < 5000){
p_valor = shapiro.test(df[[coluna]])$p.value %>% retorne_p() %>% retorne_p_ajust()
subtitulo = paste(p_valor, '(Shapiro-wilk)')
} else {
p_valor = ks.test(df[[coluna]], "pnorm", mean=media, sd=desvpad)$p.value %>% retorne_p() %>% retorne_p_ajust()
subtitulo = paste(p_valor, '(Kolmogorov-Smirnov)')
}
lista_cor0 = c('tomato','#40BCD8','#fdf0d5','#fefee3','#bee9e8','#f6aa1c','grey75') # COR DA BARRA
lista_cor1 = c('red','black','black','black','black','black','black') # COR DA BARRA
lista_cor2 = c('red','blue','#c1121f','#d68c45','#1b4965','#941b0c','grey45') # COR DA LINHA
ggplot(df, aes(x=!!sym(coluna)))+
geom_histogram(aes(y=..density..), bins=qtd_bins,
fill = alpha(lista_cor0[cor_esc], 0.7),
colour = lista_cor1[cor_esc]) +
geom_density(lwd = 1.2, linetype = 2, colour = lista_cor2[cor_esc]) +
geom_function(fun= dnorm, args=list(mean=media,sd=desvpad), col='black', lwd=1, lty=4) +
labs(x=NULL, y='Probability Density', subtitle = subtitulo)
}
# Teste
teste_normalidade(df, 'var_num')
cont_grafi = function(df, coluna){
# Criando tabela de contagem
tabela = df %>% filter(!is.na(!!sym(coluna))) %>%
group_by(!!sym(coluna)) %>%
summarise(n = n()) %>% mutate(Freq = round(n/sum(n)*100, 2)) %>% ungroup()
ggplot(tabela, aes(x=as.factor(!!sym(coluna)), y=Freq, label=Freq, fill=as.factor(!!sym(coluna)))) +
geom_col(show.legend=FALSE, color="black") +
geom_text(aes(y=Freq, label = sprintf("%0.1f%%", Freq), vjust=-0.2)) +
theme(legend.position = "bottom") +
scale_y_continuous(limits = c(0, 100), breaks=seq(from = 0, to = 100, by = 20)) +
labs(x=NULL, y="Frequency (%)", title =NULL)
}
# Teste
cont_grafi(df, 'desfecho')
cont_grafi(df, 'tratamentos')
#ggsave("nome_grafico.png", height=15, width=20, units="cm", dpi= 600)
#para representar uma tabela de contingencia (categorica vs categorica)
conti_grafi = function(df, coluna_x, coluna_y, sentido_percent='col'){
if (sentido_percent == 'row'){ #algoritmo de troca troca #la_ele #kapa_pride
temp = coluna_x
coluna_x = coluna_y
coluna_y = temp
}
# Criando tabela de contagem
grafi = df %>% filter(!is.na(!!sym(coluna_x)) & !is.na(!!sym(coluna_y))) %>%
group_by(!!sym(coluna_y), !!sym(coluna_x)) %>%
summarise(n = n()) %>% mutate(Freq = round(n/sum(n)*100, 2)) %>% ungroup()
ggplot(grafi, aes(x=as.factor(!!sym(coluna_y)), y=Freq, fill=as.factor(!!sym(coluna_x)))) +
# Grafico
geom_bar(stat="identity", position=position_dodge(preserve = 'single'), color='black') +
# Outros
geom_text(aes(y=Freq, label = sprintf("%0.1f%%", Freq)), position=position_dodge(0.75), vjust=-0.2, hjust=0.5) +
theme(legend.position = "bottom") +
scale_y_continuous(labels = scales::percent) +
scale_y_continuous(limits = c(0, 100), breaks=seq(from=0, to=100, by=10)) +
labs(x=NULL, y='Frequency (%)', title=NULL, fill=NULL)
}
# Teste
conti_grafi(df, 'desfecho', 'tratamentos')
#ggsave("nome_grafico.png", height=15, width=20, units="cm", dpi= 600)
# Graficos (Boxplot, Violino, Jitter) por Grupos -> para representar analise númerica por grupo (variavel: numerica vs categorica)
box_vin_jit = function(df, col_num, col_cat){
ggplot(df, aes(x=as.factor(!!sym(col_cat)), y=!!sym(col_num), fill=as.factor(!!sym(col_cat)))) +
# Graficos
geom_jitter(alpha=0.5, show.legend=F, size=2.5, position=position_jitter(0.25)) +
geom_violin(alpha=0.2, show.legend=F, fill='white') +
geom_boxplot(alpha=0.8, show.legend=F, width=0.5) + #outlier.shape = NA
# Medias extras
geom_errorbar(stat = "summary", fun.data = "mean_se", width= 0.3, color="white") +
geom_point(stat = "summary", fun = "mean", show.legend=F, color="red", size=2) +
# Outros
theme(legend.position = "bottom") +
labs(x=NULL, y=NULL, title=NULL)
}
# Teste
box_vin_jit(df, 'var_num', 'tratamentos')
box_vin_jit(df, 'var_num', 'desfecho')
#ggsave("nome_grafico.png", height=10, width=10.5, units="cm", dpi= 600)
# para representar média e desvio padrão (variavel: numerico (categorica vs categorica) )
dinamite = function(df, col_num, col_cat_y, col_cat_x){
# Tabela com medidas
tabela = df %>% filter(!is.na(!!sym(col_cat_y))) %>%
group_by(!!sym(col_cat_y), !!sym(col_cat_x)) %>%
summarise(
mean = mean(!!sym(col_num), na.rm = TRUE),
sd = sd(!!sym(col_num), na.rm = TRUE)) %>%
mutate(ymin= mean - sd,
ymax= mean + sd)
tabela$ymin = ifelse(tabela$ymin <= 0, 0.01, tabela$ymin)
print(tabela)
ggplot(tabela, aes(x=as.factor(!!sym(col_cat_x)), y=mean, fill=as.factor(!!sym(col_cat_y)))) +
# Grafico
geom_bar(stat="summary", fun="mean", color='black', position=position_dodge(0.75)) +
geom_errorbar(aes(ymin=ymin, ymax=ymax), width=0.3, position=position_dodge(0.75)) +
# Outros
geom_text(aes(label= round(mean,0)), position= position_dodge(0.75), vjust=-0.2, hjust=-0.3) +
theme(legend.position= "bottom") +
labs(x=NULL, y= "Mean", title=NULL) #+ coord_flip()
}
# Teste
dinamite(df, 'var_num', 'desfecho', 'tratamentos')
#Grafico de densidade (variavel: numerica vs categorica)
densidade_grafi = function(df, col_num, col_cat){
niveis = df[[col_cat]] %>% as.factor() %>% levels()
grupo1 = df[[col_num]][df[[col_cat]] == niveis[1]]
grupo2 = df[[col_num]][df[[col_cat]] == niveis[2]]
if (normalidade_por_grupo_criterio(df, col_num, col_cat) == TRUE){
medidas = df %>% group_by(!!sym(col_cat)) %>% summarize(med = mean(!!sym(col_num)))
} else {
medidas = df %>% group_by(!!sym(col_cat)) %>% summarize(med = median(!!sym(col_num)))
}
ggplot(df, aes(x=!!sym(col_num), fill=as.factor(!!sym(col_cat)))) +
geom_density(position='identity', alpha =0.5)+
geom_vline(data = medidas, aes(xintercept = med, color = as.factor(!!sym(col_cat))),
linetype="dashed", size=1, show.legend=F) +
geom_text(data = medidas, aes(x = med, label = round(med, 1), y = 0),
color="black", vjust = -0.5, hjust = 1) +
theme(legend.position = "bottom") +
labs(x=NULL, y=NULL, fill=NULL)
}
# Teste
densidade_grafi(df, 'var_num', 'desfecho')
# (data ou numerica vs categorica)
time_line_grafi = function(df, col_num, col_cat){
tabela = df %>%
group_by(!!sym(col_num), !!sym(col_cat)) %>%
summarise(n = n()) %>% mutate(Freq = round(n/sum(n), 2)) %>% ungroup()
#filter(variavel_categorica == 1) %>% ungroup()
ggplot(tabela, aes(x=!!sym(col_num), n, label=n, y=n)) +
geom_line() + geom_point(size=2) +
geom_text(aes(label = n), nudge_y = 1.5) +
theme_bw()
}
# Teste
# time_line_grafi(de, 'var_num', 'desfecho')
fore_plot = function(tabela, titulo = NULL){
xminimo = min(tabela$`2.5 %`, na.rm = T)
xmaximo = max(tabela$`97.5 %`, na.rm = T)
if ( xmaximo >= 100){
escala = 'log10'
} else{
escala = 'log2'
}
plot1 = ggplot(tabela, aes(y = variavel, x = OR)) +
geom_point(shape = 18, size = 5, color = 'navyblue') +
geom_errorbarh(aes(xmin = `2.5 %`, xmax = `97.5 %`), height = 0.25) +
geom_vline(xintercept = 1, color = "red", linetype = "dashed", cex = 1, alpha = 0.5) +
xlab("Odds Ratio (95% CI)") +
ylab(" ") +
labs(title=titulo) +
theme_bw() +
theme(panel.border = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
axis.text.y = element_text(size = 12, colour = "black"),
axis.text.x.bottom = element_text(size = 12, colour = "black"),
axis.title.x = element_text(size = 12, colour = "black")) +
scale_x_continuous(trans='log10') #+ xlim(c(xminimo-2, xmaximo+2)) #+ geom_text(aes(label = pvalor))
table_base = ggplot(tabela, aes(y=variavel)) +
ylab(NULL) + xlab("  ") +
theme(plot.title = element_text(hjust = 0.5, size=12),
axis.text.x = element_text(color="white", hjust = -3, size = 25), ## This is used to help with alignment
axis.line = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.y = element_blank(),
legend.position = "none",
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_blank())
tab1 = table_base +
geom_text(aes(x = 1, label = pvalor), size = 4) +
ggtitle("P-valor")
tab2 = table_base +
labs(title = "space") +
geom_text(aes(x = 1, label = OR_IC), size = 4) +
ggtitle("OR(IC)")
lay =  matrix(c(1,1,1,1,1,1,1,1,1,1,2,3,3), nrow = 1)
#return(grid.arrange(plot1, tab1, tab2, layout_matrix = lay))
return(plot1)
}
source("~/Codigos úteis/R program/df_ficticio.Rmd", echo=TRUE)
source("~/Codigos úteis/R program/df_ficticio.RMD", echo=TRUE)
source("~/Codigos úteis/R program/df_ficticio.RMD", echo=TRUE)
#source("~/Codigos úteis/R program/df_ficticio.RMD", echo=TRUE)
coluna_analisada = 'desfecho'
lista_coluna = names(df)[which(!(names(df) %in% c(coluna_analisada)))]
tabelona = summary_numerico_por_grupo_n_parametrico(df, "idade", coluna_analisada)[FALSE, ]
source("~/Codigos úteis/R program/df_ficticio.R", echo=TRUE)
setwd("~/Codigos úteis/Python")
source("~/Codigos úteis/R program/df_ficticio.R", echo=TRUE)
