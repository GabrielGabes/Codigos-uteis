coord_flip() + scale_fill_manual(values = c('grey80','grey30'))
ggsave(paste0("(por_grupo_",col_cat_y,")_media_e_desvio_por_pila.png"), height=10, width=20, units="cm", dpi= 600)
df$quanto_tempo_trabalha_na_profissao = ifelse(df$coluna6_Ha_quanto_tempo_você_trabalha_em_sua_profissao_ou_especializacao_atual == "menos de 1 ano", 0, 1)
table(df$quanto_tempo_trabalha_na_profissao)
df$quanto_tempo_trabalha_na_profissao %>% levels()
df$quanto_tempo_trabalha_na_profissao %>% as.factor() %>% levels()
df$coluna6_Ha_quanto_tempo_você_trabalha_em_sua_profissao_ou_especializacao_atual %>% as.factor() %>% levels()
df$quanto_tempo_trabalha_na_profissao = ifelse(df$coluna6_Ha_quanto_tempo_você_trabalha_em_sua_profissao_ou_especializacao_atual == "a. Menos de 1 ano", 0, 1)
table(df$quanto_tempo_trabalha_na_profissao)
col_cat_y = 'quanto_tempo_trabalha_na_profissao'
colunas_soma = c('p1_soma','p2_soma','p3_soma','p4_soma','p5_soma','p6_soma')
lista_vars = append(colunas_soma,'quanto_tempo_trabalha')
fd <- pivot_longer(df[,lista_vars], cols = colunas_soma,
names_to = "col_cat", values_to = "col_num")
teste = aov(col_num~col_cat, data=fd)
tabela = TukeyHSD(teste)
tabela$col_cat %>% capture()
print(tabela)
col_cat_x = 'col_cat'
col_cat_y = 'quanto_tempo_trabalha'
col_num = 'col_num'
ggplot(fd, aes(x=as.factor(!!sym(col_cat_x)), y=col_num, fill=as.factor(!!sym(col_cat_y)))) +
geom_violin(position="dodge", alpha=0.5, outlier.colour="transparent") +
geom_boxplot(alpha=0.8, show.legend=F, width=0.5, position=position_dodge(0.85)) +
# Medias extras
geom_errorbar(stat = "summary", fun.data = "mean_se", width= 0.3, color="white", position=position_dodge(0.85)) +
geom_point(stat = "summary", fun = "mean", show.legend=F, color="red", size=2, position=position_dodge(0.85)) +
theme_bw() + theme(legend.position = "none") +
scale_x_discrete(labels= c(paste('Pilar', 1:6))) +
labs(x=NULL, y=NULL, fill='Group') + scale_fill_manual(values = c('grey80','grey30'))
ggsave(paste0("(por_grupo_",col_cat_y,")_boxplot_por_pila.png"), height=10, width=20, units="cm", dpi= 600)
########################################################################
tabela = fd %>%
group_by(!!sym(col_cat_x), !!sym(col_cat_y)) %>%
summarise(
count = n(),
min = min(!!sym(col_num), na.rm = TRUE),
max = max(!!sym(col_num), na.rm = TRUE),
mean = mean(!!sym(col_num), na.rm = TRUE),
sd = sd(!!sym(col_num), na.rm = TRUE),
median = median(!!sym(col_num), na.rm = TRUE),
q1 = quantile(!!sym(col_num), 0.25, na.rm = TRUE),
q3 = quantile(!!sym(col_num), 0.75, na.rm = TRUE)) %>%
mutate(ymin= mean - sd,
ymax= mean + sd)
tabela$ymin = ifelse(tabela$ymin <= 0, 0.01, tabela$ymin)
tabela$exibir = paste0(round(tabela$mean,2), " (", round(tabela$sd,2), ")")
tabela
ggplot(tabela, aes(x=as.factor(!!sym(col_cat_x)), y=mean, fill=as.factor(!!sym(col_cat_y)))) +
geom_bar(stat="summary", fun="mean", color='black', position=position_dodge(0.75)) +
geom_errorbar(aes(ymin=ymin, ymax=ymax), width=0.3, position=position_dodge(0.75)) +
geom_text(aes(label=exibir, y=10), position=position_dodge(0.75)) +
theme_bw() + theme(legend.position= "none") +
labs(x=NULL, y= "Mean", title=NULL, fill=NULL) +
scale_x_discrete(labels= c(paste('Pilar', 1:6))) +
coord_flip() + scale_fill_manual(values = c('grey80','grey30'))
ggsave(paste0("(por_grupo_",col_cat_y,")_media_e_desvio_por_pila.png"), height=10, width=20, units="cm", dpi= 600)
col_cat_y = 'quanto_tempo_trabalha_na_profissao'
colunas_soma = c('p1_soma','p2_soma','p3_soma','p4_soma','p5_soma','p6_soma')
lista_vars = append(colunas_soma,'quanto_tempo_trabalha')
fd <- pivot_longer(df[,lista_vars], cols = colunas_soma,
names_to = "col_cat", values_to = "col_num")
teste = aov(col_num~col_cat, data=fd)
tabela = TukeyHSD(teste)
tabela$col_cat %>% capture()
print(tabela)
col_cat_x = 'col_cat'
col_num = 'col_num'
ggplot(fd, aes(x=as.factor(!!sym(col_cat_x)), y=col_num, fill=as.factor(!!sym(col_cat_y)))) +
geom_violin(position="dodge", alpha=0.5, outlier.colour="transparent") +
geom_boxplot(alpha=0.8, show.legend=F, width=0.5, position=position_dodge(0.85)) +
# Medias extras
geom_errorbar(stat = "summary", fun.data = "mean_se", width= 0.3, color="white", position=position_dodge(0.85)) +
geom_point(stat = "summary", fun = "mean", show.legend=F, color="red", size=2, position=position_dodge(0.85)) +
theme_bw() + theme(legend.position = "none") +
scale_x_discrete(labels= c(paste('Pilar', 1:6))) +
labs(x=NULL, y=NULL, fill='Group') + scale_fill_manual(values = c('grey80','grey30'))
fd
col_cat_y = 'quanto_tempo_trabalha_na_profissao'
ggplot(fd, aes(x=as.factor(!!sym(col_cat_x)), y=col_num, fill=as.factor(!!sym(col_cat_y)))) +
geom_violin(position="dodge", alpha=0.5, outlier.colour="transparent") +
geom_boxplot(alpha=0.8, show.legend=F, width=0.5, position=position_dodge(0.85)) +
# Medias extras
geom_errorbar(stat = "summary", fun.data = "mean_se", width= 0.3, color="white", position=position_dodge(0.85)) +
geom_point(stat = "summary", fun = "mean", show.legend=F, color="red", size=2, position=position_dodge(0.85)) +
theme_bw() + theme(legend.position = "none") +
scale_x_discrete(labels= c(paste('Pilar', 1:6))) +
labs(x=NULL, y=NULL, fill='Group') + scale_fill_manual(values = c('grey80','grey30'))
ggplot(fd, aes(x=as.factor(!!sym(col_cat_x)), y=col_num, fill=as.factor(!!sym(col_cat_y)))) +
geom_violin(position="dodge", alpha=0.5, outlier.colour="transparent") +
geom_boxplot(alpha=0.8, show.legend=F, width=0.5, position=position_dodge(0.85)) +
# Medias extras
geom_errorbar(stat = "summary", fun.data = "mean_se", width= 0.3, color="white", position=position_dodge(0.85)) +
geom_point(stat = "summary", fun = "mean", show.legend=F, color="red", size=2, position=position_dodge(0.85)) +
theme_bw() + theme(legend.position = "none") +
scale_x_discrete(labels= c(paste('Pilar', 1:6))) +
labs(x=NULL, y=NULL, fill='Group') + scale_fill_manual(values = c('grey80','grey30'))
ggplot(fd, aes(x=as.factor(!!sym(col_cat_x)), y=col_num, fill=as.factor(!!sym(col_cat_y)))) +
geom_violin(position="dodge", alpha=0.5, outlier.colour="transparent")
ggplot(fd, aes(x=as.factor(!!sym(col_cat_x)), y=col_num, fill=as.factor(!!sym(col_cat_y)))) +
#geom_violin(position="dodge", alpha=0.5, outlier.colour="transparent") +
geom_boxplot(alpha=0.8, show.legend=F, width=0.5, position=position_dodge(0.85))
fd
col_cat_y = 'quanto_tempo_trabalha_na_profissao'
colunas_soma = c('p1_soma','p2_soma','p3_soma','p4_soma','p5_soma','p6_soma')
lista_vars = append(colunas_soma,'col_cat_y')
fd <- pivot_longer(df[,lista_vars], cols = colunas_soma,
names_to = "col_cat", values_to = "col_num")
col_cat_y = 'quanto_tempo_trabalha_na_profissao'
colunas_soma = c('p1_soma','p2_soma','p3_soma','p4_soma','p5_soma','p6_soma')
lista_vars = append(colunas_soma,col_cat_y)
fd <- pivot_longer(df[,lista_vars], cols = colunas_soma,
names_to = "col_cat", values_to = "col_num")
fd
teste = aov(col_num~col_cat, data=fd)
tabela = TukeyHSD(teste)
tabela$col_cat %>% capture()
print(tabela)
col_cat_x = 'col_cat'
col_num = 'col_num'
ggplot(fd, aes(x=as.factor(!!sym(col_cat_x)), y=col_num, fill=as.factor(!!sym(col_cat_y)))) +
#geom_violin(position="dodge", alpha=0.5, outlier.colour="transparent") +
geom_boxplot(alpha=0.8, show.legend=F, width=0.5, position=position_dodge(0.85)) +
# Medias extras
geom_errorbar(stat = "summary", fun.data = "mean_se", width= 0.3, color="white", position=position_dodge(0.85)) +
geom_point(stat = "summary", fun = "mean", show.legend=F, color="red", size=2, position=position_dodge(0.85)) +
theme_bw() + theme(legend.position = "none") +
scale_x_discrete(labels= c(paste('Pilar', 1:6))) +
labs(x=NULL, y=NULL, fill='Group') + scale_fill_manual(values = c('grey80','grey30'))
ggsave(paste0("(por_grupo_",col_cat_y,")_boxplot_por_pila.png"), height=10, width=20, units="cm", dpi= 600)
########################################################################
tabela = fd %>%
group_by(!!sym(col_cat_x), !!sym(col_cat_y)) %>%
summarise(
count = n(),
min = min(!!sym(col_num), na.rm = TRUE),
max = max(!!sym(col_num), na.rm = TRUE),
mean = mean(!!sym(col_num), na.rm = TRUE),
sd = sd(!!sym(col_num), na.rm = TRUE),
median = median(!!sym(col_num), na.rm = TRUE),
q1 = quantile(!!sym(col_num), 0.25, na.rm = TRUE),
q3 = quantile(!!sym(col_num), 0.75, na.rm = TRUE)) %>%
mutate(ymin= mean - sd,
ymax= mean + sd)
tabela$ymin = ifelse(tabela$ymin <= 0, 0.01, tabela$ymin)
tabela$exibir = paste0(round(tabela$mean,2), " (", round(tabela$sd,2), ")")
tabela
ggplot(tabela, aes(x=as.factor(!!sym(col_cat_x)), y=mean, fill=as.factor(!!sym(col_cat_y)))) +
geom_bar(stat="summary", fun="mean", color='black', position=position_dodge(0.75)) +
geom_errorbar(aes(ymin=ymin, ymax=ymax), width=0.3, position=position_dodge(0.75)) +
geom_text(aes(label=exibir, y=10), position=position_dodge(0.75)) +
theme_bw() + theme(legend.position= "none") +
labs(x=NULL, y= "Mean", title=NULL, fill=NULL) +
scale_x_discrete(labels= c(paste('Pilar', 1:6))) +
coord_flip() + scale_fill_manual(values = c('grey80','grey30'))
ggsave(paste0("(por_grupo_",col_cat_y,")_media_e_desvio_por_pila.png"), height=10, width=20, units="cm", dpi= 600)
fd <- data.frame(pilar = character(),
media_na = integer(), desv_pad_na = integer(),
media_a = integer(), desv_pad_a = integer(),
test_t = integer(), d_cohen = integer(), IC_00_d = integer(), IC_01_d = integer(),
mediana_na = integer(), q1_na =  integer(), q2_na = integer(),
mediana_a = integer(), q1_a =  integer(), q2_a = integer(),
test_man = integer(), HL = integer(), IC_00_HL = integer(), IC_01_HL = integer())
print('********************************************')
for (coluna in colunas_soma){
print(coluna)
#grupo0 = df[[coluna]][df$acreditacao2 != "1. Com Acreditação"]
grupo0 = df[[coluna]][df$quanto_tempo_trabalha_na_profissao == 0]
#grupo1 = df[[coluna]][df$acreditacao2 == "1. Com Acreditação"]
grupo1 = df[[coluna]][df$quanto_tempo_trabalha_na_profissao == 1]
media0 = grupo0 %>% mean(na.rm=T)
desvio_pad0 = grupo0 %>% sd(na.rm=T)
median0 = grupo0 %>% median(na.rm=T)
q10 = grupo0 %>% quantile(0.25, na.rm=T)
q20 = grupo0 %>% quantile(0.75, na.rm=T)
media1 = grupo1 %>% mean(na.rm=T)
desvio_pad1 = grupo1 %>% sd(na.rm=T)
median1 = grupo1 %>% median(na.rm=T)
q11 = grupo1 %>% quantile(0.25, na.rm=T)
q21 = grupo1 %>% quantile(0.75, na.rm=T)
#Estimador d'cohen
p_value_t = t.test(grupo1, grupo0)$p.value %>% retorne_p()
#print(paste0('p-value = ', p_value))
d_cohen = cohen.d(na.omit(as.numeric(grupo0)), na.omit(as.numeric(grupo1)))
estimador_d = d_cohen$estimate
IC_00_d = d_cohen$conf.int[1]
IC_01_d = d_cohen$conf.int[2]
#Estimador Hodges Lehmann
teste_mann = wilcox.test(grupo0, grupo1, conf.int = TRUE)
p_value_mann = teste_mann$p.value %>% retorne_p()
#print(paste0('p-value = ', p_value))
estimador_HL = teste_mann$estimate
IC_00_HL = teste_mann$conf.int[1]
IC_01_HL = teste_mann$conf.int[2]
#print(hodges_lehmann)
fd[nrow(fd)+1,] = c(coluna,
media0 %>% round(2), desvio_pad0 %>% round(2),
media1 %>% round(2), desvio_pad1 %>% round(2),
p_value_t, estimador_d %>% round(2), IC_00_d %>% round(2), IC_01_d %>% round(2),
median0, q10, q20,
median1, q11, q21,
p_value_mann, estimador_HL %>% round(2), IC_00_HL %>% round(2), IC_01_HL %>% round(2))
}
fd %>% capture()
fd <- data.frame(pilar = character(),
media_0 = integer(), desv_pad_0 = integer(),
media_1 = integer(), desv_pad_1 = integer(),
test_t = integer(), d_cohen = integer(), IC_00_d = integer(), IC_01_d = integer(),
mediana_0 = integer(), q1_0 =  integer(), q2_0 = integer(),
mediana_1 = integer(), q1_1 =  integer(), q2_1 = integer(),
test_man = integer(), HL = integer(), IC_00_HL = integer(), IC_01_HL = integer())
print('********************************************')
for (coluna in colunas_soma){
print(coluna)
#grupo0 = df[[coluna]][df$acreditacao2 != "1. Com Acreditação"]
grupo0 = df[[coluna]][df$quanto_tempo_trabalha_na_profissao == 0]
#grupo1 = df[[coluna]][df$acreditacao2 == "1. Com Acreditação"]
grupo1 = df[[coluna]][df$quanto_tempo_trabalha_na_profissao == 1]
media0 = grupo0 %>% mean(na.rm=T)
desvio_pad0 = grupo0 %>% sd(na.rm=T)
median0 = grupo0 %>% median(na.rm=T)
q10 = grupo0 %>% quantile(0.25, na.rm=T)
q20 = grupo0 %>% quantile(0.75, na.rm=T)
media1 = grupo1 %>% mean(na.rm=T)
desvio_pad1 = grupo1 %>% sd(na.rm=T)
median1 = grupo1 %>% median(na.rm=T)
q11 = grupo1 %>% quantile(0.25, na.rm=T)
q21 = grupo1 %>% quantile(0.75, na.rm=T)
#Estimador d'cohen
p_value_t = t.test(grupo1, grupo0)$p.value %>% retorne_p()
#print(paste0('p-value = ', p_value))
d_cohen = cohen.d(na.omit(as.numeric(grupo0)), na.omit(as.numeric(grupo1)))
estimador_d = d_cohen$estimate
IC_00_d = d_cohen$conf.int[1]
IC_01_d = d_cohen$conf.int[2]
#Estimador Hodges Lehmann
teste_mann = wilcox.test(grupo0, grupo1, conf.int = TRUE)
p_value_mann = teste_mann$p.value %>% retorne_p()
#print(paste0('p-value = ', p_value))
estimador_HL = teste_mann$estimate
IC_00_HL = teste_mann$conf.int[1]
IC_01_HL = teste_mann$conf.int[2]
#print(hodges_lehmann)
fd[nrow(fd)+1,] = c(coluna,
media0 %>% round(2), desvio_pad0 %>% round(2),
media1 %>% round(2), desvio_pad1 %>% round(2),
p_value_t, estimador_d %>% round(2), IC_00_d %>% round(2), IC_01_d %>% round(2),
median0, q10, q20,
median1, q11, q21,
p_value_mann, estimador_HL %>% round(2), IC_00_HL %>% round(2), IC_01_HL %>% round(2))
}
fd %>% capture()
teste_mann$estimate
teste_mann$conf.int[1]
colunas = c('p1_1','p1_2','p1_3','p1_4','p1_5','p1_6','p2_1','p2_2','p2_3','p2_4','p2_5','p2_6','p3_1','p3_2','p3_3','p3_4','p3_5','p3_6','p4_1','p4_2','p4_3','p4_4','p4_5','p4_6','p5_1','p5_2','p5_3','p5_4','p5_5','p5_6','p6_1','p6_2','p6_3','p6_4','p6_5','p6_6','Score','p1_soma','p2_soma','p3_soma','p4_soma','p5_soma','p6_soma')
df[,colunas]
df_filter = df[,colunas]
colunas = c('p1_1','p1_2','p1_3','p1_4','p1_5','p1_6','p2_1','p2_2','p2_3','p2_4','p2_5','p2_6','p3_1','p3_2','p3_3','p3_4','p3_5','p3_6','p4_1','p4_2','p4_3','p4_4','p4_5','p4_6','p5_1','p5_2','p5_3','p5_4','p5_5','p5_6','p6_1','p6_2','p6_3','p6_4','p6_5','p6_6','Score','p1_soma','p2_soma','p3_soma','p4_soma','p5_soma','p6_soma')
df_filter = df[,colunas]
cor.test(df_filter)
df[,colunas]
cor.test(df_filter)
cor(df_filter)
cor(df_filter, na.rm=T)
cor(df_filter, na.rm=T)
cor.test(df_filter, na.rm=T)
cor.test(df_filter, na.rm=T)
cor(df_filter, na.rm=T)
cor(df_filter, use = "pairwise.complete.obs")
cor(df_filter, use = "pairwise.complete.obs") %>% round(2)
colunas = c('p1_1','p1_2','p1_3','p1_4','p1_5','p1_6','p2_1','p2_2','p2_3','p2_4','p2_5','p2_6','p3_1','p3_2','p3_3','p3_4','p3_5','p3_6','p4_1','p4_2','p4_3','p4_4','p4_5','p4_6','p5_1','p5_2','p5_3','p5_4','p5_5','p5_6','p6_1','p6_2','p6_3','p6_4','p6_5','p6_6','Score','p1_soma','p2_soma','p3_soma','p4_soma','p5_soma','p6_soma')
df_filter = df[,colunas]
# Calculando a matriz de correlação
correlation_matrix <- cor(df_filter, use = "pairwise.complete.obs")
# Convertendo a matriz de correlação em um dataframe
correlation_df <- as.data.frame(correlation_matrix)
# Adicionando nomes de linhas e colunas para facilitar a visualização
rownames(correlation_df) <- colnames(correlation_df)
colnames(correlation_df) <- rownames(correlation_df)
# Convertendo a matriz de correlação em um formato longo (tidy) para ggplot
correlation_df_long <- melt(correlation_df, varnames = c("var1", "var2"))
# Criando o gráfico de correlações usando ggplot
ggplot(correlation_df_long, aes(x = var1, y = var2, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1,1), space = "Lab", name="Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Matriz de Correlação")
correlation_df_long
# Convertendo a matriz de correlação em um formato longo (tidy) para ggplot
correlation_df_long <- melt(correlation_df, varnames = c("var1", "var2"))
# Criando o gráfico de correlações usando ggplot
ggplot(correlation_df_long, aes(x = var1, y = var2, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1,1), space = "Lab", name="Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Matriz de Correlação")
names(correlation_df_long)
# Criando o gráfico de correlações usando ggplot
ggplot(correlation_df_long, aes(x = variable, y = variable, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1,1), space = "Lab", name="Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Matriz de Correlação")
correlation_df_long
# Criando o gráfico de correlações usando ggplot
ggplot(correlation_df_long, aes(x = variable, y = variable, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1,1), space = "Lab", name="Correlation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Matriz de Correlação")
correlation_df_long
correlation_matrix <- cor(df_filter, use = "pairwise.complete.obs")
correlation_df <- as.data.frame(correlation_matrix)
correlation_df
rownames(correlation_df) <- colnames(correlation_df)
colnames(correlation_df) <- rownames(correlation_df)
# Calculando a matriz de correlação
correlation_matrix <- cor(df_filter, use = "pairwise.complete.obs")
correlation_df <- as.data.frame(correlation_matrix)
rownames(correlation_df) <- colnames(correlation_df)
colnames(correlation_df) <- rownames(correlation_df)
correlation_df_long <- melt(correlation_df)
correlation_df_long
install.packages('ggpcorrplot')
install.packages('ggpcorrplot')
install.packages("ggcorrplot")
library(ggcorrplot)
# Calculando a matriz de correlação
correlation_matrix <- cor(df_filter, use = "pairwise.complete.obs")
# Plotando a matriz de correlação usando ggcorrplot
ggcorrplot(correlation_matrix, type = "lower", lab = TRUE)
ggsave("matrix_correlacao.png", height=30, width=30, units="cm", dpi= 600)
# Calculando a matriz de correlação
correlation_matrix <- cor(df_filter, use = "pairwise.complete.obs")
# Plotando a matriz de correlação usando ggcorrplot
ggcorrplot(correlation_matrix, type = "lower", lab = TRUE)
ggsave("matrix_correlacao.png", height=30, width=30, units="cm", dpi= 600)
colunas = c('p1_1','p1_2','p1_3','p1_4','p1_5','p1_6','p2_1','p2_2','p2_3','p2_4','p2_5','p2_6','p3_1','p3_2','p3_3','p3_4','p3_5','p3_6','p4_1','p4_2','p4_3','p4_4','p4_5','p4_6','p5_1','p5_2','p5_3','p5_4','p5_5','p5_6','p6_1','p6_2','p6_3','p6_4','p6_5','p6_6','Score','p1_soma','p2_soma','p3_soma','p4_soma','p5_soma','p6_soma')
df_filter = df[,colunas]
correlation_matrix <- cor(df_filter, use = "pairwise.complete.obs")
ggcorrplot(correlation_matrix, type = "lower", lab = TRUE)
ggsave("matrix_correlacao.png", height=40, width=40, units="cm", dpi= 600)
colunas = c('p1_1','p1_2','p1_3','p1_4','p1_5','p1_6',
'p2_1','p2_2','p2_3','p2_4','p2_5','p2_6',
'p3_1','p3_2','p3_3','p3_4','p3_5','p3_6',
'p4_1','p4_2','p4_3','p4_4','p4_5','p4_6',
'p5_1','p5_2','p5_3','p5_4','p5_5','p5_6',
'p6_1','p6_2','p6_3','p6_4','p6_5','p6_6',
'Score',
'p1_soma','p2_soma','p3_soma','p4_soma','p5_soma','p6_soma')
df_filter = df[,colunas]
correlation_matrix <- cor(df_filter, use = "pairwise.complete.obs")
ggcorrplot(correlation_matrix, type = "lower", lab = TRUE)
ggsave("matrix_correlacao.png", height=45, width=45, units="cm", dpi= 600)
colunas = c(#'p1_1','p1_2','p1_3','p1_4','p1_5','p1_6',
#'p2_1','p2_2','p2_3','p2_4','p2_5','p2_6',
#'p3_1','p3_2','p3_3','p3_4','p3_5','p3_6',
#'p4_1','p4_2','p4_3','p4_4','p4_5','p4_6',
#'p5_1','p5_2','p5_3','p5_4','p5_5','p5_6',
#'p6_1','p6_2','p6_3','p6_4','p6_5','p6_6',
#'Score',
'p1_soma','p2_soma','p3_soma','p4_soma','p5_soma','p6_soma')
df_filter = df[,colunas]
correlation_matrix <- cor(df_filter, use = "pairwise.complete.obs")
ggcorrplot(correlation_matrix, type = "lower", lab = TRUE)
ggsave("matrix_correlacao2.png", height=45, width=45, units="cm", dpi= 600)
colunas = c(#'p1_1','p1_2','p1_3','p1_4','p1_5','p1_6',
#'p2_1','p2_2','p2_3','p2_4','p2_5','p2_6',
#'p3_1','p3_2','p3_3','p3_4','p3_5','p3_6',
#'p4_1','p4_2','p4_3','p4_4','p4_5','p4_6',
#'p5_1','p5_2','p5_3','p5_4','p5_5','p5_6',
#'p6_1','p6_2','p6_3','p6_4','p6_5','p6_6',
#'Score',
'p1_soma','p2_soma','p3_soma','p4_soma','p5_soma','p6_soma')
df_filter = df[,colunas]
correlation_matrix <- cor(df_filter, use = "pairwise.complete.obs")
ggcorrplot(correlation_matrix, type = "lower", lab = TRUE)
#ggsave("matrix_correlacao.png", height=45, width=45, units="cm", dpi= 600)
ggsave("matrix_correlacao2.png", height=10, width=10, units="cm", dpi= 600)
colunas = c('p1_1','p1_2','p1_3','p1_4','p1_5','p1_6',
'p2_1','p2_2','p2_3','p2_4','p2_5','p2_6',
'p3_1','p3_2','p3_3','p3_4','p3_5','p3_6',
'p4_1','p4_2','p4_3','p4_4','p4_5','p4_6',
'p5_1','p5_2','p5_3','p5_4','p5_5','p5_6',
'p6_1','p6_2','p6_3','p6_4','p6_5','p6_6'
#'Score',
#'p1_soma','p2_soma','p3_soma','p4_soma','p5_soma','p6_soma')
df_filter = df[,colunas]
colunas = c('p1_1','p1_2','p1_3','p1_4','p1_5','p1_6',
'p2_1','p2_2','p2_3','p2_4','p2_5','p2_6',
'p3_1','p3_2','p3_3','p3_4','p3_5','p3_6',
'p4_1','p4_2','p4_3','p4_4','p4_5','p4_6',
'p5_1','p5_2','p5_3','p5_4','p5_5','p5_6',
'p6_1','p6_2','p6_3','p6_4','p6_5','p6_6')
#'Score',
#'p1_soma','p2_soma','p3_soma','p4_soma','p5_soma','p6_soma'
df_filter = df[,colunas]
correlation_matrix <- cor(df_filter, use = "pairwise.complete.obs")
ggcorrplot(correlation_matrix, type = "lower", lab = TRUE)
ggsave("matrix_correlacao.png", height=45, width=45, units="cm", dpi= 600)
#ggsave("matrix_correlacao2.png", height=10, width=10, units="cm", dpi= 600)
source("~/ARQUIVOS CODIGOS BASE/funs.R", echo=TRUE)
library(skimr) #resumo dos dados
skim(df)
df
df = data("cars")
df
df = data("cars")
df
#df =
data("cars")
cars
setwd("~/ARQUIVOS CODIGOS BASE")
library(readxl) # importar arquivos com final 'xlsx'
df = read_excel("df.xlsx")
library(readxl) # importar arquivos com final 'xlsx'
df = read_excel("df.xlsx")
df
library(skimr) #resumo dos dados
skim(df)
library(dplyr)
glimpse(df)
library(skimr) #resumo dos dados
skim(df)
library(dplyr)
glimpse(df)
for (coluna in names(df)){
classe = class(df[[coluna]])
if (classe != 'numeric'){
print(coluna)
}
}
classe
for (coluna in names(df)){
classe = class(df[[coluna]])[1]
if (classe != 'numeric'){
print(coluna)
}
}
for (coluna in names(df)){
classe = class(df[[coluna]])[1]
if (classe != 'numeric'){
texto = paste0(coluna, '->')
print(texto)
niveis = levels(as.factor(df[[coluna]]))
print(niveis)
}
}
rep('*', 25)
paste0(rep('*', 25))
paste0(rep(*, 25))
class(df$idade)
class(df$idade)
levels(df$idade)
levels(df$idade)
class(df$idade)
levels(df$sexo)
levels(df$sexo)
df$sexo = as.factor(df$sexo)
levels(df$sexo)
library(readxl) # importar arquivos com final 'xlsx'
df = read_excel("df.xlsx") #, col_types = cols(.default = "factor"))
df
df = read_excel("df.xlsx", col_types = cols(.default = "factor")) # para carregar o banco com todas colunas categoricas como factors
library(readxl) # importar arquivos com final 'xlsx'
df = read_excel("df.xlsx") #, col_types = cols(.default = "factor"))
df
library(skimr) #resumo dos dados
skim(df)
levels(df$sexo)
# apenas colunas do tipo 'factor' aceitam o metodo 'levels', abaixo esta o código para mudar o tipo
df$sexo = as.factor(df$sexo)
levels(df$sexo)
class(df$idade)
levels(df$sexo)
df$sexo[df$sexo == 'F'] = 'Feminino'
df$sexo[df$sexo == 'M'] = 'Masculino'
levels(df$sexo)
df$sexo = factor(df$sexo, labels=c('M','F') )
levels(df$sexo)
# organizando os itens
df$sexo = factor(df$sexo, labels=c('M','F') )
# organizando os itens
df$sexo = factor(df$sexo, levels=c('M','F') )
levels(df$sexo)
df$sexo[df$sexo == 'F'] = 'Feminino'
df$sexo[df$sexo == 'M'] = 'Masculino'
levels(df$sexo)
levels(df$sexo)
levels(df$sexo)
levels(df$sexo)
# mundando o nome do nivel
df$sexo[df$sexo == 'F'] = 'Feminino'
library(readxl) # importar arquivos com final 'xlsx'
df = read_excel("df.xlsx") #, col_types = cols(.default = "factor"))
df
levels(df$sexo)
# apenas colunas do tipo 'factor' aceitam o metodo 'levels', abaixo esta o código para mudar o tipo
df$sexo = as.factor(df$sexo)
levels(df$sexo)
# organizando os itens
df$sexo = factor(df$sexo, levels=c('M','F') )
# mundando o nome do nivel
df$sexo[df$sexo == 'F'] = 'Feminino'
df$sexo[df$sexo == 'M'] = 'Masculino'
levels(df$sexo)
df$idade
levels(factor(df$idade))
